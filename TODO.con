---+ Concurrent version of RDF-DB.

---++ Objectives

  * Provide concurrency similar to Prolog's dynamic DB, using the Prolog update
  semantics.  Steps:

    1. Avoid the _need_ for reindexing
    2. Introduce generations for RDF triples
    3. Change locking.  Options:

      1. As Prolog does it now:
	- Lock on entry, updating active_queries
	- Lock on exit, updating active_queries
	- GC if desirable and no active queries

      2. Lock-free version of (1):
	- Update active queries lock-free.  Atomic test to see
	  whether GC is in progress.

	  	--> Anyway, mostly same code as (1).

      3. Alternatively
	- Use lock-free algorithms to update chains
	- Use atom-GC style silence-all-threads-and-gc

---+++ Logical update semantics

  * Add born/died generation to a triple
  * Dealing with predicate clouds:
    - A cloud has multiple reachability matrices, organised in an AVL tree.
    - If an rdf:subPropertyOf is added/deleted, we make a new (lazy)
    matrix.
  * If two non-empty predicate clouds must be merged:
    1. Move triples to new hash
	- Delete triple (generation)
	- Create new triple with new hash at this generation.
	! predicate->cloud no longer works
	    + predicate --> AVL-tree of clouds
    2. *OR* Create new cloud with all merged predicates.
	- Link this cloud to original ones
	- Perform multiple queries

---++ GC issues

  * If there are no active queries and GC is desirable
    1. Remove erased triples
    2. Restart generation-counter (keep offset for the `real' generation)
    3. Reset generation-AVL trees
	- Do we need AVL trees then?  Alternative is array, possibly with
	binary search.

---+ References

Lock-free library: http://www.liblfds.org/
